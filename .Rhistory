# Chunk 11
## YOUR CODE HERE
# Chunk 12
load("data/preprocessed/clean.RData")
str(clean)
# Chunk 13
head(dplyr::arrange(clean, subject_age)) # Low to high (default))
head(dplyr::arrange(clean, desc(subject_age))) # High to low
# or, use the minus symbol to specify descending order
head(dplyr::arrange(clean, -subject_age)) # Also high to low
# Chunk 14
names(clean)
clean <- clean %>%
rename(
race = # NEW name
subject_race,  # OLD name
sex = subject_sex,
age = subject_age
) # OLD name
names(clean)
# Chunk 15
female_drivers <- clean %>%
filter(sex == "female") %>%
arrange(age)
head(female_drivers)
# Chunk 16
old_males <- clean %>%
filter(sex == "male", age > 90) %>%
arrange(-age)
head(old_males)
# Chunk 17
## YOUR CODE HERE
# Chunk 18
sub1 <- clean %>%
select("date", "arrest_made")
head(sub1)
# Chunk 19
sub2 <- clean %>%
dplyr::select(where(is.numeric))
head(sub2)
# Chunk 20
sub3 <- clean %>%
dplyr::select(contains("s"))
head(sub3)
# Chunk 21
sub4 <- clean %>%
dplyr::select(starts_with("a"))
head(sub4)
# Chunk 22
# the base R way
clean$new_col_name <- clean$age / 10
head(clean)
# the dplyr way
clean <- clean %>%
mutate(new_dplyr = age * 10)
head(clean)
# Chunk 23
clean$new_col_name <- NULL
head(clean)
clean$new_dplyr <- NULL
head(clean)
# Chunk 24
sub5 <- clean %>%
count(sex, sort = TRUE)
sub5
# Chunk 25
sexes <- clean %>%
group_by(sex) %>%
count()
sexes
# Chunk 26
sexes_age <- clean %>%
group_by(sex) %>%
# the text to the left of the equals sign is the new column name (avg_age)
# the operation to the right performs the function (the average/mean)
summarize(avg_age = mean(age, na.rm = TRUE))
sexes_age
# Chunk 27
sexes_age_race <- clean %>%
group_by(sex, race) %>%
summarize(avg_age = mean(age, na.rm = TRUE))
sexes_age_race
# Chunk 28
sexes_age_race <- clean %>%
group_by(sex, race) %>%
summarize(avg_age = mean(age, na.rm = TRUE),
count = n())
sexes_age_race
# Chunk 29
clean <- clean %>%
mutate(agegroup = case_when(age >= 80 ~ "Elderly",
age >= 18 ~ "Adult",
age < 18 ~ "Adolescent"))
head(clean)
table(clean$agegroup)
# Chunk 30
clean <- clean %>%
group_by(sex) %>%
mutate(avg_age = mean(age, na.rm = TRUE))
head(clean)
# Chunk 32
## YOUR CODE HERE
# Chunk 33
# Set a ggplot2 theme to get rid of the default gray background
theme_set(theme_minimal())
# Chunk 34
anscombe
# View correlations between x and y variables
cor(anscombe)[c(1:4), c(5:8)]
# Chunk 35
anscombe_processed <- anscombe %>%
tidyr::gather(x_name, x_value, x1:x4) %>%
tidyr::gather(y_name, y_value, y1:y4)
head(anscombe_processed)
# plot
# dont worry, we will cover what these different aspects of the grammar of graphic mean!
# also note that we can pipe directly into ggplot! More on this below.
anscombe_processed %>%
ggplot(aes(x = x_value, y = y_value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_grid(x_name ~ y_name) +
theme_bw() +
labs(
x = "X values",
y = "Y values",
title = "Anscombe's quartet"
)
# Chunk 36
# scatterplot example
p <- ggplot(
data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
p
# specify points as our geom, i.e., a scatterplot
p + geom_point()
# geom_smooth has calculated a smoothed line
# the shaded area is the standard error for the line
p + geom_point() +
geom_smooth()
# Chunk 37
data(midwest) # load midwest dataset
midwest
# Chunk 38
midwest %>%
ggplot(aes(x = area)) +
# the stat_bin argument picks up 30 bins (or "buckets") by default.
geom_histogram()
midwest %>%
ggplot(aes(x = area)) +
# only 10 bins
geom_histogram(bins = 10)
# Chunk 39
# subset just Ohio and Indiana
ggplot(
data = subset(midwest, state %in% c("OH", "IN")),
mapping = aes(x = percollege, fill = state)
) +
# alpha adjusts the transparency
geom_histogram(alpha = 0.7, bins = 20) +
scale_fill_viridis_d()
# Chunk 40
ggplot(
data = gapminder,
mapping = aes(
x = gdpPercap, y = lifeExp,
size = pop
)
) +
geom_point()
# Chunk 41
ggplot(
data = gapminder,
mapping = aes(
x = gdpPercap, y = lifeExp,
size = pop,
color = continent
)
) +
geom_point() +
scale_color_viridis_d()
# Chunk 42
p + geom_point() +
geom_smooth()
p + geom_point(alpha = 0.2) +
# color only the line red
geom_smooth(color = "red", se = FALSE, size = 2, method = "loess")
# Chunk 43
ggplot(
data = gapminder,
mapping = aes(
x = gdpPercap, y = lifeExp,
color = continent # color in the global mapping is different from...
)
) +
geom_point(alpha = 0.3) +
geom_smooth(method = "loess", color = "red") + # ... color in geom_smooth
labs(
x = "log GDP",
y = "Life Expectancy",
title = "A Gapminder Plot",
subtitle = "Data points are country-years",
caption = "Source: Gapminder"
)
# Chunk 44
p + geom_point() +
coord_flip() # coord_type
# Chunk 45
p + geom_point() # without scaling
p + geom_point() +
# log 10 transform the x-axis
scale_x_log10() +
geom_smooth(method = "lm", color = "green")
# Chunk 46
p
p + geom_point(alpha = 0.3) +
geom_smooth(method = "loess", color = "red") +
scale_x_log10(labels = scales::dollar) +
labs(
x = "log GDP",
y = "Life Expectancy",
title = "A Gapminder Plot",
subtitle = "Data points are country-years",
caption = "Source: Gapminder"
)
# Chunk 47
p + geom_point(alpha = 0.3) +
geom_smooth(method = "loess", color = "red") +
scale_x_log10(labels = scales::dollar) +
labs(
x = "log GDP",
y = "Life Expectancy",
title = "A Gapminder Plot",
subtitle = "Data points are country-years",
caption = "Source: Gapminder"
) +
# include a nice background
ggthemes::theme_clean()
# Chunk 48
# save your work to the working directory
ggsave("figure_example.png")
# Chunk 49
p + geom_point()
p + geom_line()
# Chunk 50
p + geom_line(aes(group = country)) # group by, # The outlier is Kuwait.
p + geom_line(aes(group = country)) + facet_wrap(~continent) # facetting
p + geom_line(aes(group = country), color = "gray70") +
geom_smooth(size = 1.1, method = "loess", se = FALSE) +
scale_y_log10(labels = scales::dollar) +
facet_wrap(~continent, ncol = 5) + # for single categorical variable; for multiple categorical variables use facet_grid()
labs(
x = "Year",
y = "GDP per capita",
title = "GDP per capita on Five continents"
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Chunk 51
gapminder_formatted <- gapminder %>%
group_by(continent, year) %>%
summarize(
gdp_mean = mean(gdpPercap),
lifeExp_mean = mean(lifeExp)
)
gapminder_formatted
# Chunk 52
# plot! that looks much nicer :)
ggplot(data = gapminder_formatted, aes(x = year, y = lifeExp_mean, color = continent)) +
geom_point() +
labs(
x = "Year",
y = "Life expectancy",
title = "Life expectancy on Five continents"
)
# Chunk 53
# plot! that looks much nicer :)
ggplot(data = gapminder_formatted, aes(x = year, y = lifeExp_mean, color = continent)) +
geom_point() +
labs(
x = "Year",
y = "Life expectancy",
title = "Life expectancy on Five continents"
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Chunk 54
# Facet by country where continent is filtered by Europe
gapminder %>%
filter(continent == "Europe") %>%
group_by(country, year) %>%
summarize(
gdp_mean = mean(gdpPercap),
lifeExp_mean = mean(lifeExp)
) %>%
ggplot(aes(x = year, y = lifeExp_mean)) +
geom_point() +
labs(
x = "Year",
y = "Life expectancy",
title = "Life expectancy in Europe"
) +
facet_wrap(~country)
# Chunk 55
# Descending alphabetical sorting
gapminder %>%
filter(continent == "Europe") %>%
group_by(country, year) %>%
summarize(
gdp_mean = mean(gdpPercap),
lifeExp_mean = mean(lifeExp)
) %>%
ggplot(aes(x = country, y = lifeExp_mean)) +
geom_boxplot() +
labs(
x = "Country",
y = "Life expectancy",
title = "Life expectancy in Europe"
) +
coord_flip()
# Chunk 56
# reorder by ascending
gapminder %>%
filter(continent == "Europe") %>%
group_by(country, year) %>%
summarize(
gdp_mean = mean(gdpPercap),
lifeExp_mean = mean(lifeExp)
) %>%
ggplot(aes(x = reorder(country, lifeExp_mean), y = lifeExp_mean)) +
geom_boxplot() +
labs(
x = "Country",
y = "Life expectancy",
title = "Life expectancy in Europe"
) +
coord_flip()
# reorder by descending (note the minus sign)
gapminder %>%
filter(continent == "Europe") %>%
group_by(country, year) %>%
summarize(
gdp_mean = mean(gdpPercap),
lifeExp_mean = mean(lifeExp)
) %>%
ggplot(aes(x = reorder(country, -lifeExp_mean), y = lifeExp_mean)) +
geom_boxplot() +
labs(
x = "Country",
y = "Life expectancy",
title = "Life expectancy in Europe"
) +
coord_flip()
# Chunk 57
gapminder %>%
filter(continent == "Asia" | continent == "Americas") %>%
group_by(continent, country) %>%
summarize(
gdp_mean = mean(gdpPercap),
lifeExp_mean = mean(lifeExp)
) %>%
ggplot(aes(x = gdp_mean, y = lifeExp_mean)) +
geom_point() +
geom_text(aes(label = country)) +
scale_x_log10() +
facet_grid(~continent)
# Chunk 58
gapminder %>%
filter(continent == "Asia" | continent == "Americas") %>%
group_by(continent, country) %>%
summarize(
gdp_mean = mean(gdpPercap),
lifeExp_mean = mean(lifeExp)
) %>%
ggplot(aes(x = gdp_mean, y = lifeExp_mean)) +
geom_point() +
geom_label(aes(label = country)) +
scale_x_log10() +
facet_grid(~continent)
# Chunk 59
gapminder %>%
filter(continent == "Asia" | continent == "Americas") %>%
group_by(continent, country) %>%
summarize(
gdp_mean = mean(gdpPercap),
lifeExp_mean = mean(lifeExp)
) %>%
ggplot(aes(x = gdp_mean, y = lifeExp_mean)) +
geom_point() +
ggrepel::geom_text_repel(aes(label = country)) + # there's also geom_label_repel
scale_x_log10() +
facet_grid(~continent)
# Chunk 60
## YOUR CODE HERE
load("data/preprocessed/oak.RData")
# Chunk 61
## YOUR CODE HERE
ggplot(clean,
aes(x = sex,
y = age,
fill = sex)) +
geom_boxplot() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
limits = c(0, 100)) +
scale_fill_brewer(palette = "BuPu") +
ggthemes::theme_stata() +
theme(legend.position = "none")
# Chunk 62
model_colors <- RColorBrewer::brewer.pal(3, "Set1") # select three qualitatively different colors from a larger palette.
gapminder %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm", aes(color = "OLS", fill = "OLS")) +
geom_smooth(
method = "lm", formula = y ~ splines::bs(x, df = 3),
aes(color = "Cubic Spline", fill = "Cubic Spline")
) +
geom_smooth(method = "loess", aes(color = "LOESS", fill = "LOESS")) +
theme(legend.position = "top") +
scale_color_manual(name = "Models", values = model_colors) +
scale_fill_manual(name = "Models", values = model_colors)
# Chunk 63
# regression model
out <- lm(
formula = lifeExp ~ gdpPercap + pop + continent,
data = gapminder
)
# Chunk 64
# estimates
out_comp <- broom::tidy(out)
# construct the base layer
p <- out_comp %>%
ggplot(aes(x = term, y = estimate))
p
# plot the estimates as points
p + geom_point() +
coord_flip() +
theme_bw()
# Chunk 65
# save the estimates plus their confidence intervals
out_conf <- broom::tidy(out, conf.int = TRUE)
# plot coefficients using geom_pointrange()
out_conf %>%
ggplot(aes(x = reorder(term, estimate), y = estimate, ymin = conf.low, ymax = conf.high)) +
geom_pointrange() +
coord_flip() +
labs(x = "", y = "OLS Estimate") +
theme_bw()
# plot coefficients with errorbars
out_conf %>%
ggplot(aes(x = estimate, y = reorder(term, estimate))) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high,
height = .25)) +
labs(y = "", x = "OLS Estimate") +
theme_bw()
# Chunk 66
nested <- gapminder %>%
group_by(country, continent) %>%
nest()
head(nested)
# Retrieve just the first list from the grouped data frame
nested$data %>% purrr::pluck(1)
# Chunk 67
lm_model <- function(df) {
lm(lifeExp ~ year, data = df)
}
# Chunk 68
# Apply m_model to the nested data
nested <- nested %>%
mutate(models = purrr::map(data, lm_model)) # Add the list object as a new column
head(nested)
# Chunk 69
glanced <- nested %>%
mutate(glance = map(models, broom::glance))
glanced
# Pluck the first item on the list
glanced$glance %>% pluck(1)
# Pull just the p.value
glanced$glance %>% pluck(1) %>% pull(p.value)
# Chunk 70
glanced %>%
unnest(glance) %>%
arrange(r.squared)
glanced %>%
unnest(glance) %>%
ggplot(aes(continent, r.squared)) +
geom_jitter(width = 0.5)
# Chunk 71
# View the nested structure
# we see the number of observations and other five columns in the column named "data"
nested <- gapminder %>%
group_by(continent) %>%
nest()
nested
# specify our model in a column named "models"
nested <- nested %>%
mutate(models = map(data, ~lm(lifeExp ~ year + country, data = .)))
nested
# tidy up!
tidied <- nested %>%
mutate(tidied = map(models, broom::tidy))
tidied
# construct tibble of estimates and p-values
model_out <- tidied %>%
unnest(tidied) %>%
mutate(term = stringr::str_replace(term, "country", "")) %>%
select(continent, term, estimate, p.value) %>%
mutate(p_threshold = ifelse(p.value < 0.05, 1, 0))
model_out
# show countries with statistical insignificance
model_out %>% filter(p_threshold == 1) %>% pull(term) %>% unique()
# show countries with statistical significance
model_out %>% filter(p_threshold == 0) %>% pull(term) %>% unique()
